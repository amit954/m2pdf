/*
 * Copyright Â© 2023 Netas Ltd., Switzerland.
 * @author  Lukas Buchs, lukas.buchs@netas.ch
 * @license MIT
 * @date    2023-02-17
 */
export class MultiPartParser{constructor(e){if(this._headers={},this._body=null,this._multiParts=[],this._isAttachment=!1,"object"!=typeof e)throw new Error("invalid content for class MultiPartParser");this._lineEnding=this.getLineEnding(e);const t=this.splitHeaderFromBody(e);if(t.header){const e=new TextDecoder("utf-8").decode(t.header).split(/\n(?=[^\s])/g);for(let t of e){const e=t.indexOf(":");if(-1!==e){const n=t.substring(0,e).toLowerCase().trim(),r=t.substring(e+1).trim();this._headers[n]&&"string"==typeof this._headers[n]&&(this._headers[n]=[this._headers[n]]),this._headers[n]?this._headers[n].push(r):this._headers[n]=r}}}let n=this.getContentType();const r=this.getHeader("Content-Disposition");if(r&&r.match(/attachment/i)&&(this._isAttachment=!0),this._isAttachment)this.parseBodyApplication(t.body);else switch(n.mediaType){case"multipart":this.parseBodyMultipart(t.body,n.args);break;case"text":this.parseBodyText(t.body);break;default:this.parseBodyApplication(t.body);break}}get isAttachment(){return this._isAttachment}get contentType(){let e=this.getContentType();return e.mediaType&&e.subType?e.mediaType+"/"+e.subType:null}getContentType(){let e=this.getHeader("Content-Type");if(e){let t=e.match(/([a-z]+)\/([a-z0-9\-\.\+_]+);?((?:.|\s)*)$/i);if(t){const e=t[3]&&""!==t[3].trim()?t[3].trim():null;return{mediaType:t[1].toLowerCase(),subType:t[2].toLowerCase(),args:e}}}return{mediaType:null,subType:null,args:null}}getBody(){return this._body}getPartByContentType(e,t=null){let n=this.recursiveGetByContentType(this,e,t);return n||null}getHeader(e,t=!1,n=!1){let r=null;return this._headers[e.toLowerCase()]&&(r=this._headers[e.toLowerCase()]),r&&t&&(r="string"==typeof r?this.decodeRfc1342(r):r.map(this.decodeRfc1342.bind(this))),r&&n&&(r="string"==typeof r?r.replace(/\r?\n\s/g,""):r.map((e=>e.replace(/\r?\n\s/g,"")))),r}getMultiParts(){return this._multiParts}getFilename(){let e=this.getHeader("Content-Disposition"),t=e&&e.match(/filename=\"?([^"\n]+)\"?/i);if(t)return this.decodeRfc1342(t[1]);let n=this.getHeader("Content-Type"),r=n&&n.match(/name=\"?([^"\n]+)\"?/i);return r?this.decodeRfc1342(r[1]):null}decodeContent(e,t=null){let n=this.getHeader("Content-Transfer-Encoding");switch(n=n?n.toUpperCase():"BINARY",n){case"BASE64":return this.decodeBase64(e);case"QUOTED-PRINTABLE":return this.decodeQuotedPrintable(e,t);case"8BIT":case"7BIT":case"BINARY":return e}}decodeRfc1342(e){const t=new TextDecoder;return e=e.replace(/=\?([0-9a-z\-_:]+)\?(B|Q)\?(.*?)\?=/gi,((e,n,r,i)=>{let s=null;switch(r.toUpperCase()){case"B":s=this.decodeBase64(i,n);break;case"Q":s=this.decodeQuotedPrintable(i,n,!0);break;default:throw new Error('invalid string encoding "'+r+'"')}return t.decode(new Uint8Array(s))}))}decodeBase64(e,t=null){if(e instanceof Uint8Array){e=(new TextDecoder).decode(e)}const n=atob(e),r=n.length,i=new Uint8Array(r);for(let e=0;e<r;e++)i[e]=n.charCodeAt(e);if(t){const e=new TextDecoder(t);return(new TextEncoder).encode(e.decode(i)).buffer}return i.buffer}decodeQuotedPrintable(e,t,n=!1){if(e instanceof Uint8Array){e=(new TextDecoder).decode(e)}n&&(e=e.replace(/_/g," "));const r=new TextDecoder(t||"utf-8"),i=e.replace(/[\t\x20]$/gm,"").replace(/=(?:\r\n?|\n)/g,"").replace(/((?:=[a-fA-F0-9]{2})+)/g,(e=>{const t=e.substring(1).split("="),n=new Uint8Array(t.length);for(let e=0;e<t.length;e++)n[e]=parseInt(t[e],16);return r.decode(n)}));return(new TextEncoder).encode(i).buffer}getBoundary(e){const t=e.match(/boundary=\"?([^"\s\n]+)\"?/i);return t?t[1]:null}recursiveGetByContentType(e,t,n){const r=e.getContentType();if(t===r.mediaType&&(!n||n===r.subType))return e;for(let r of e.getMultiParts())if(r instanceof MultiPartParser){let e=this.recursiveGetByContentType(r,t,n);if(e)return e}return null}getLineEnding(e){const t=new Uint8Array(e);let n=0,r=0;for(let e=0;e<t.length;e++)10===t[e]&&13===t[e-1]?r++:10===t[e]&&n++;return n>0&&r>0?"mixed":n>0?"unix":r>0?"windows":"unknown"}splitHeaderFromBody(e){const t=new Uint8Array(e);let n=null,r=0;for(let e=0;e<t.length;e++){if("unix"!==this._lineEnding&&13===t[e]&&10===t[e+1]&&13===t[e+2]&&10===t[e+3]){r=4,n=e;break}if(10===t[e]&&10===t[e+1]){r=2,n=e;break}}let i=null,s=null;return n?(i=t.slice(0,n),s=t.slice(n+r)):s=t,{header:i,body:s}}parseBodyApplication(e){this._body=this.decodeContent(e,null)}parseBodyText(e){let t="utf-8";const n=this.getContentType().args;if(n&&n.match(/charset=\"?([^"\s\n;]+)\"?/i)){t=n.match(/charset=\"?([^"\s\n;]+)\"?/i)[1]}const r=this.decodeContent(e,t),i=new TextDecoder;this._body=i.decode(new Uint8Array(r))}parseBodyMultipart(e,t){const n=this.getBoundary(t);if(!n)throw new Error("Boundary not found.");const r="--"+n+"--",i=this.indexOfString(e,r);if(-1===i)throw new Error("Final Boundary not found");let s=e.slice(0,i+r.length);for(let e=0;e<1e3;e++){let e="--"+n,t=this.indexOfString(s,e),r=this.indexOfString(s,e,t+1);if(-1===t||-1===r)break;t+=e.length;const i=s.slice(t,r);this._multiParts.push(new MultiPartParser(i)),s=s.slice(r)}}indexOfString(e,t,n=0,r="utf-8"){const i=new TextEncoder(r).encode(t);return e.findIndex(((t,r)=>{if(r<n)return!1;for(let t=0;t<i.length;t++)if(e[r+t]!==i[t])return!1;return!0}))}}