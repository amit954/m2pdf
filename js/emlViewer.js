let EmlReader,currentAttachments=[];function sanitizeFilename(e){return e.replace(/[^a-z0-9\s.\-_]/gi,"").replace(/\s+/g," ").trim().replace(/\s/g,"_")||"attachments"}function formatFileSize(e){if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB","TB"][t]}function sanitizeHtml(e){return e.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,"")}function displayEmailContent(e,t){const n=document.getElementById("email-content");if(n.innerHTML="",t){const t=document.createElement("div");t.className="email-content-container",t.innerHTML=sanitizeHtml(e),n.appendChild(t)}else{const t=document.createElement("pre");t.className="plain-text-content",t.style.whiteSpace="pre-wrap",t.style.margin="0",t.textContent=e,n.appendChild(t)}}async function handleFile(e){if(e&&e.name.toLowerCase().endsWith(".eml"))if(EmlReader)try{$("#error-message").hide();const t=await e.arrayBuffer(),n=new EmlReader(t);$("#email-subject").text(n.getSubject()||"(No Subject)"),$("#email-from").text(n.getFrom()||"Unknown"),$("#email-to").text(n.getTo()||"Unknown");const a=n.getDate();if(a){const e={weekday:"short",day:"2-digit",month:"short",year:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!0,timeZoneName:"shortOffset"},t=a.toLocaleString("en-US",e).replace(/,/g,"").replace(/(\d{2}):(\d{2}):(\d{2})/,"$1:$2:$3").replace("GMT","");$("#email-date").text(t)}else $("#email-date").text("Unknown");const o=n.getCc();$("#cc-container").toggle(!!o),o&&$("#email-cc").text(o);const i=n.getBcc();$("#bcc-container").toggle(!!i),i&&$("#email-bcc").text(i);const s=n.getReplyTo();$("#reply-to-container").toggle(!!s),s&&$("#email-reply-to").text(s);const l=n.getAttachments();if(currentAttachments=l,l.length>0){const e=$("#attachments-list");e.empty(),l.forEach(((t,n)=>{const a=formatFileSize(t.filesize);e.append(`\n                        <div class="attachment-item">\n                            <span class="attachment-name">${t.filename}</span>\n                            <span class="attachment-size">${a}</span>\n                            <a href="#" class="attachment-download no-print" \n                               onclick="downloadAttachment('${t.filename}', '${t.contentType}', ${n}); return false;">\n                                <i class="bi bi-download"></i>\n                            </a>\n                        </div>\n                    `)})),$("#attachments-section").show(),$("#download-all").toggle(l.length>1),l.length>1&&$("#download-all").off("click").on("click",window.downloadAllAttachments)}else $("#attachments-section").hide(),$("#download-all").hide();const r=n.getMessageHtml(),c=n.getMessageText();if(r){displayEmailContent(r.replace(/(\r\n|\n|\r)/g,"").replace(/\s+/g," ").replace(/> +</g,"><").replace(/<br\s*\/?>/gi,"<br>").replace(/(<br>){3,}/gi,"<br><br>").trim(),!0)}else if(c){displayEmailContent(c.replace(/(\r\n|\n|\r)+/g,"\n").replace(/\n\s+\n/g,"\n\n").replace(/\s+/g," ").replace(/\n{3,}/g,"\n\n").trim(),!1)}else displayEmailContent("(No content)",!1);$("#email-display").show(),setTimeout((()=>{document.getElementById("email-display").scrollIntoView({behavior:"smooth",block:"start"})}),100)}catch(e){$("#error-message").text("Error processing email: "+e.message).show()}else $("#error-message").text("EML parser not loaded. Please check console for errors.").show();else $("#error-message").text("Please drop an .eml file").show()}function createPrintVersion(){const e=$("#email-subject").text(),t=$("#email-from").text(),n=$("#email-to").text(),a=$("#email-date").text(),o=$("#email-cc").text(),i=$("#email-bcc").text(),s=$("#email-reply-to").text(),l=$("#email-content").html();let r="";if($("#attachments-section").is(":visible")){const e=[];$("#attachments-list .attachment-item").each((function(){const t=$(this).find(".attachment-name").text(),n=$(this).find(".attachment-size").text();e.push(`<div style="display:flex;margin:8px 0;"><span style="flex-grow:1;">${t}</span><span style="color:#5f6368;margin-left:10px;">${n}</span></div>`)})),e.length>0&&(r=`\n                <div style="border-top: 1px solid #e0e0e0; padding-top: 10px; margin-top: 20px;">\n                    <h3 style="font-size: 16px; margin-bottom: 10px;">Attachments</h3>\n                    ${e.join("")}\n                </div>\n            `)}const c=window.open("","_blank");c.document.write(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <title>Print: ${e}</title>\n            <meta charset="UTF-8">\n            <style>\n                body {\n                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;\n                    line-height: 1.5;\n                    color: #000;\n                    margin: 0;\n                    padding: 20px;\n                }\n                .container {\n                    max-width: 100%;\n                    margin: 0 auto;\n                }\n                .email-subject {\n                    font-size: 20px;\n                    font-weight: bold;\n                    margin: 0 0 15px 0;\n                }\n                .metadata-row {\n                    display: flex;\n                    padding: 3px 0;\n                }\n                .metadata-label {\n                    font-weight: 500;\n                    color: #5f6368;\n                    min-width: 55px;\n                    margin-right: 5px;\n                }\n                .email-content {\n                    margin-top: 20px;\n                    border-top: 1px solid #e0e0e0;\n                    padding-top: 20px;\n                }\n                img { max-width: 100%; height: auto; }\n                pre, code { white-space: pre-wrap; }\n                * { word-break: break-word; }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <h1 class="email-subject">${e}</h1>\n                \n                <div class="metadata">\n                    <div class="metadata-row">\n                        <span class="metadata-label">From:</span>\n                        <span>${t}</span>\n                    </div>\n                    <div class="metadata-row">\n                        <span class="metadata-label">To:</span>\n                        <span>${n}</span>\n                    </div>\n                    ${o?`\n                    <div class="metadata-row">\n                        <span class="metadata-label">CC:</span>\n                        <span>${o}</span>\n                    </div>\n                    `:""}\n                    ${i?`\n                    <div class="metadata-row">\n                        <span class="metadata-label">BCC:</span>\n                        <span>${i}</span>\n                    </div>\n                    `:""}\n                    <div class="metadata-row">\n                        <span class="metadata-label">Date:</span>\n                        <span>${a}</span>\n                    </div>\n                    ${s?`\n                    <div class="metadata-row">\n                        <span class="metadata-label">Reply-To:</span>\n                        <span>${s}</span>\n                    </div>\n                    `:""}\n                </div>\n                \n                <div class="email-content">\n                    ${l}\n                </div>\n                \n                ${r}\n            </div>\n            \n            <script>\n                // Automatically print and then close the window when done\n                window.onload = function() {\n                    setTimeout(function() {\n                        window.print();\n                        // Optional: Close the window after printing\n                        // Uncomment the next line if you want the print window to close automatically\n                        // window.close();\n                    }, 500);\n                };\n            <\/script>\n        </body>\n        </html>\n    `),c.document.close()}function preparePrint(){$(".email-header, .email-content").addClass("no-page-break"),$(".email-content").css({"padding-top":"0","margin-top":"0"}),$("#email-display").css({"margin-top":"0","padding-top":"0"}),$("body").addClass("printing");$("#email-content").height()>1e3&&$("html, body").css("height","auto"),/Chrome/.test(navigator.userAgent)&&($(".email-header").css("position","relative"),$(".email-content").css("position","relative"))}function restorePage(){$("body").removeClass("printing"),$("html, body").css("height",""),$(".email-header").css("position",""),$(".email-content").css("position","")}if($(document).ready((async function(){try{const e=await import("./EmlReader.js");EmlReader=e.EmlReader}catch(e){$("#error-message").text("Error loading EML parser: "+e.message).show()}$(document).on("drag dragstart dragend dragover dragenter dragleave drop",(function(e){e.preventDefault(),e.stopPropagation()}));const e=$("#drop-zone");e.on("click",(function(){const e=$('<input type="file" accept=".eml" style="display: none">');e.on("change",(function(e){const t=e.target.files[0];t&&handleFile(t)})),e.click()})),e.on("dragover dragenter",(function(){$(this).addClass("drag-over")})).on("dragleave dragend drop",(function(){$(this).removeClass("drag-over")})).on("drop",(function(e){handleFile(e.originalEvent.dataTransfer.files[0])})),$("#print-button").off("click").on("click",(function(){createPrintVersion()}))})),window.matchMedia){const e=window.matchMedia("print");e.addEventListener?e.addEventListener("change",(function(e){e.matches?preparePrint():restorePage()})):e.addListener&&e.addListener((function(e){e.matches?preparePrint():restorePage()}))}window.onbeforeprint=preparePrint,window.onafterprint=restorePage,window.downloadAllAttachments=async function(){const e=new JSZip,t=sanitizeFilename($("#email-subject").text()||"attachments");currentAttachments.forEach((t=>{e.file(t.filename,t.content)}));try{const n=await e.generateAsync({type:"blob",compression:"DEFLATE",compressionOptions:{level:9}}),a=URL.createObjectURL(n),o=document.createElement("a");o.href=a,o.download=`${t}_attachments.zip`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(a)}catch(e){alert("Error creating ZIP file: "+e.message)}},window.downloadAttachment=function(e,t,n){const a=currentAttachments[n],o=new Blob([a.content],{type:t}),i=URL.createObjectURL(o),s=document.createElement("a");s.href=i,s.download=e,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(i)};